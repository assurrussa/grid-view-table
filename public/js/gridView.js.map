{
  "version": 3,
  "sources": [
    "gridView.js"
  ],
  "names": [],
  "mappings
  "file": "gridView.js",
  "sourcesContent": [
    "Vue.http.headers.common['X-CSRF-TOKEN'] = document.querySelector('#token').getAttribute('value');\n\n// register the grid component\nVue.component('grid-view', {\n    template: '#grid-template',\n    props: {\n        data: [],\n        columns: [],\n        sort: ''\n    },\n    data: {\n        sortKey: '',\n        sortOrders: []\n    },\n    methods: {\n        sortList: function () {\n            if (!this.sortOrders) {\n                var sortOrders = {};\n                if (this.columns) {\n                    this.columns.forEach(function (column) {\n                        sortOrders[column.key] = 1\n                    });\n                }\n                this.sortOrders = sortOrders;\n            }\n        },\n        sortBy: function (key, bool) {\n            if (!bool) {\n                return false;\n            }\n            this.sortList();\n            this.sortKey = key;\n            this.sortOrders[key] = this.sortOrders[key] * -1;\n            var orderBy = this.sortOrders[key] > 0;\n            this.$parent.sortBy(key, orderBy);\n        },\n        selectedSelect: function (key, value) {\n            this.$parent.selectedSelect(key, value);\n        }\n    }\n});\n\nVue.filter('timeAgo', function(value) {\n    return moment.utc(value).local().fromNow();\n});\n\n// gridList\nvar gridList = new Vue({\n    el: '#gridList',\n    ready: function () {\n        if ((history.state == null) || (history.state.data == undefined)) {\n            this.fetchListAll();\n        } else {\n            this.$set('gridColumns', history.state.data.headers);\n            this.$set('gridData', history.state.data.data.data);\n            this.$set('gridPagination', history.state.data.pagination);\n            this.$set('gridFrom', history.state.data.data.from);\n            this.$set('gridTo', history.state.data.data.to);\n            this.$set('gridTotal', history.state.data.data.total);\n            this.$set('createButton', history.state.data.createButton);\n            this.$set('customButton', history.state.data.customButton);\n            this.$set('gridCurrentPage', history.state.data.page);\n            this.$set('orderBy', history.state.data.orderBy);\n            this.$set('sortName', history.state.data.sortName);\n            // this.$set('filter', history.state.data.filter);\n            // this.$set('searchQuery', history.state.data.search);\n            // this.$set('gridCountPage', history.state.data.count);\n            this.loadIcon = false;\n        }\n    },\n\n    data: {\n        searchQuery: '', // поиск по слову\n        createButton: '', // кнопка создания страницы\n        customButton: '', // кнопка кастомная\n        loadIcon: false, // показ иконки\n        sortBool: true, // сортировка по умолчанию включена для колонки\n        screening: false, // Выводить экранированные данные или нет\n        sortName: '', // сортровка какой колонки требуется\n        gridCountPage: 10, // количество элементов на страние списка\n        gridCurrentPage: 1, // текущая страница\n        gridPagination: '', // пагинация\n        gridFrom: 0, // от\n        gridTo: 0, // до\n        gridTotal: 0, // Общее количество\n        orderBy: 'dsc', // сортировка - порядок\n        filter: {}, // массив для фильтрации\n        resultFilter: '' // результат фильтрации массивов\n    },\n\n    watch: {\n        gridCountPage: function (value, oldValue) {\n            if ((value == '') || (value == undefined)) {\n                return false;\n            }\n            this.gridCurrentPage = 1;\n            this.gridCountPage = value;\n            this.fetchListAll();\n        },\n\n        searchQueries: function (value, oldValue) {\n            this.gridCurrentPage = 1;\n            this.searchQuery = value;\n            this.fetchListAll();\n        }\n    },\n    methods: {\n        fetchListAll: function () {\n            this.loadIcon = true;\n            var currentPage = window.location.href,\n                object,\n                urlSearch = window.location.search,\n                listSearch = {},\n                str = '';\n            /**\n             *\n             * @param array\n             * @param arrayConcat\n             * @returns {{}}\n             */\n            objects = function (array, arrayConcat) {\n                var listResult = {},\n                    key;\n                for (key in array) {\n                    if (array.hasOwnProperty(key)) {\n                        listResult[key] = array[key];\n                    }\n                }\n                for (key in arrayConcat) {\n                    if (arrayConcat.hasOwnProperty(key)) {\n                        listResult[key] = arrayConcat[key];\n                    }\n                }\n                return listResult;\n            };\n            object = {\n                sortName: this.sortName,\n                orderBy: this.orderBy,\n                search: this.searchQuery,\n                page: this.gridCurrentPage,\n                count: this.gridCountPage\n            };\n            object = objects(this.filter, object);\n\n            currentPage = currentPage.replace(urlSearch, '');\n            currentPage = currentPage.replace(/\\/create$/, '');\n            currentPage = currentPage.replace(/\\/([0-9]+)\\/edit/, '');\n            currentPage = currentPage.replace(/\\/$/, '');\n            if(urlSearch != '') {\n                // для изменения урла.\n                var key;\n                tmp = decodeURIComponent(urlSearch.substr(1)).split('&');   // разделяем переменные\n                for(var i=0; i < tmp.length; i++) {\n                    tmp2 = tmp[i].split('=');     // массив param будет содержать\n                    listSearch[tmp2[0]] = tmp2[1];       // пары ключ(имя переменной)->значение\n                }\n                for (key in object) {\n                    delete listSearch[key];\n                }\n                for (key in listSearch) {\n                    str += '&' + key + '=' + listSearch[key];\n                }\n                str = (str.substr(1) != '') ? '?' + str.substr(1) : '';\n                history.pushState(null, null, currentPage + str);\n            }\n            for (key in object) {\n                urlSearch += '&' + key + '=' + object[key];\n            }\n\n            urlSearch = (urlSearch.substr(1) != '') ? '?' + urlSearch.substr(1) : '';\n\n            this.$http\n                .get(currentPage + '/sync' + urlSearch)\n                .then(function (response) {\n                    if (!history.state) {\n                        history.pushState(response, null);\n                    } else {\n                        history.replaceState(response, null);\n                    }\n                    this.$set('gridColumns', response.data.headers);\n                    this.$set('gridData', response.data.data.data);\n                    this.$set('gridPagination', response.data.pagination);\n                    this.$set('gridFrom', response.data.data.from);\n                    this.$set('gridTo', response.data.data.to);\n                    this.$set('gridTotal', response.data.data.total);\n                    this.$set('createButton', response.data.createButton);\n                    this.$set('customButton', response.data.customButton);\n                    this.$set('gridCurrentPage', response.data.page);\n                    this.$set('orderBy', response.data.orderBy);\n                    this.$set('sortName', response.data.sortName);\n                    // this.$set('filter', _response.data.filter);\n                    // this.$set('searchQuery', _response.data.search);\n                    // this.$set('gridCountPage', _response.data.count);\n                    this.loadIcon = false;\n                }, function ($errors) {\n                    // console.log('errors' + $errors);\n                });\n        },\n        onPage: function (value, e) {\n            e.preventDefault();\n            if ((value == '') || (value == undefined)) {\n                return false;\n            }\n            this.gridCurrentPage = value;\n            this.fetchListAll();\n        },\n        sortBy: function (key, orderBy) {\n            this.sortName = key;\n            this.orderBy = (orderBy) ? 'ASC' : \"DESC\";\n            this.fetchListAll();\n        },\n        selectedSelect: function (key, value) {\n            console.log(key, value);\n            if(value == '') {\n                delete this.filter[key];\n            } else {\n                this.filter[key] = value;\n            }\n            this.gridCurrentPage = 1;\n            this.fetchListAll();\n        }\n    }\n});"
  ],
  "sourceRoot": "/source/"
}