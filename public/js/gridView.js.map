{"version":3,"sources":["gridView.js"],"names":[],"mappingsfile":"gridView.js","sourcesContent":["Vue.http.headers.common['X-CSRF-TOKEN'] = document.querySelector('#token').getAttribute('value');\r\n\r\n// register the grid component\r\nVue.component('grid-view', {\r\n    template: '#grid-template',\r\n    props: {\r\n        data: [],\r\n        columns: [],\r\n        sort: ''\r\n    },\r\n    data: {\r\n        sortKey: '',\r\n        sortOrders: []\r\n    },\r\n    methods: {\r\n        sortList: function () {\r\n            if (!this.sortOrders) {\r\n                var sortOrders = {};\r\n                if (this.columns) {\r\n                    this.columns.forEach(function (column) {\r\n                        sortOrders[column.key] = 1\r\n                    });\r\n                }\r\n                this.sortOrders = sortOrders;\r\n            }\r\n        },\r\n        sortBy: function (key, bool) {\r\n            if (!bool) {\r\n                return false;\r\n            }\r\n            this.sortList();\r\n            this.sortKey = key;\r\n            this.sortOrders[key] = this.sortOrders[key] * -1;\r\n            var orderBy = this.sortOrders[key] > 0;\r\n            this.$parent.sortBy(key, orderBy);\r\n        }\r\n    }\r\n});\r\n\r\n// gridList\r\nvar gridList = new Vue({\r\n    el: '#gridList',\r\n\r\n    ready: function () {\r\n        if ((history.state == null) || (history.state.data == undefined)) {\r\n            this.fetchListAll();\r\n        } else {\r\n            this.$set('gridColumns', history.state.headers);\r\n            this.$set('gridData', history.state.data.data);\r\n            this.$set('gridPagination', history.state.pagination);\r\n            this.$set('gridFrom', history.state.data.from);\r\n            this.$set('gridTo', history.state.data.to);\r\n            this.$set('gridTotal', history.state.data.total);\r\n            this.$set('createButton', history.state.createButton);\r\n            this.$set('customButton', history.state.customButton);\r\n            this.$set('stringUri', history.state.stringUri);\r\n            this.$set('gridCurrentPage', history.state.page);\r\n            this.$set('orderBy', history.state.orderBy);\r\n            this.$set('sortName', history.state.sortName);\r\n            //this.$set('searchQuery', history.state.search);\r\n            //this.$set('gridCountPage', history.state.count);\r\n            this.loadIcon = false;\r\n        }\r\n    },\r\n\r\n    data: {\r\n        searchQuery: '', // поиск по слову\r\n        createButton: '', // кнопка создания страницы\r\n        customButton: '', // кнопка кастомная\r\n        loadIcon: false, // показ иконки\r\n        sortBool: true, // сортировка по умолчанию включена для колонки\r\n        screening: false, // Выводить экранированные данные или нет\r\n        sortName: '', // сортровка какой колонки требуется\r\n        gridCountPage: 10, // количество элементов на страние списка\r\n        gridCurrentPage: 1, // текущая страница\r\n        gridPagination: '', // пагинация\r\n        gridFrom: 0, // от\r\n        gridTo: 0, // до\r\n        gridTotal: 0, // Общее количество\r\n        orderBy: 'dsc', // сортировка - порядок\r\n        stringUri: '' // стркоа запроса\r\n    },\r\n\r\n    watch: {\r\n        gridCountPage: function (value, oldValue) {\r\n            if ((value == '') || (value == undefined)) {\r\n                return false;\r\n            }\r\n            this.gridCurrentPage = 1;\r\n            this.gridCountPage = value;\r\n            this.fetchListAll();\r\n        },\r\n\r\n        searchQueries: function (value, oldValue) {\r\n            this.gridCurrentPage = 1;\r\n            this.searchQuery = value;\r\n            this.fetchListAll();\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        fetchListAll: function () {\r\n            this.loadIcon = true;\r\n\r\n            var currentPage = window.location.href;\r\n            currentPage = currentPage.replace(window.location.search, '');\r\n            currentPage = currentPage.replace(/\\/create$/, '');\r\n            currentPage = currentPage.replace(/\\/([0-9]+)\\/edit/, '');\r\n\r\n            var object = {\r\n                sortName: this.sortName,\r\n                orderBy: this.orderBy,\r\n                search: this.searchQuery,\r\n                page: this.gridCurrentPage,\r\n                count: this.gridCountPage\r\n            };\r\n            this.$http.get(currentPage + '/sync' + window.location.search, object, function (response) {\r\n                var currentPage = response.stringUri;\r\n                currentPage = currentPage.replace(/\\/sync/, '');\r\n                if (!history.state) {\r\n                    history.pushState(response, null);\r\n                } else {\r\n                    history.replaceState(response, null);\r\n                }\r\n                this.$set('gridColumns', response.headers);\r\n                this.$set('gridData', response.data.data);\r\n                this.$set('gridPagination', response.pagination);\r\n                this.$set('gridFrom', response.data.from);\r\n                this.$set('gridTo', response.data.to);\r\n                this.$set('gridTotal', response.data.total);\r\n                this.$set('createButton', response.createButton);\r\n                this.$set('customButton', response.customButton);\r\n                this.$set('gridCurrentPage', response.page);\r\n                this.$set('orderBy', response.orderBy);\r\n                this.$set('sortName', response.sortName);\r\n                //this.$set('searchQuery', response.search);\r\n                //this.$set('gridCountPage', response.count);\r\n                this.$set('stringUri', currentPage);\r\n                this.loadIcon = false;\r\n            });\r\n        },\r\n        onPage: function (value, e) {\r\n            e.preventDefault();\r\n            if ((value == '') || (value == undefined)) {\r\n                return false;\r\n            }\r\n            this.gridCurrentPage = value;\r\n            this.fetchListAll();\r\n        },\r\n\r\n        sortBy: function (key, orderBy) {\r\n            this.sortName = key;\r\n            this.orderBy = (orderBy) ? 'ASC' : \"DESC\";\r\n            this.fetchListAll();\r\n        }\r\n    }\r\n});"],"sourceRoot":"/source/"}